package javakominfo.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javakominfo.backend.entity.V_A;
import javakominfo.backend.repository.V_ARepo;
import javakominfo.backend.utility.ReportUtil;

import java.net.URL;
import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;

public class VulnerabilityAssessmentController implements Initializable {

  @FXML
  private TableColumn<V_A, String> domainVAColumn;

  @FXML
  private TextField domainVATextField;

  @FXML
  private TableColumn<V_A, String> fileVAColumn;

  @FXML
  private TextField fileVATextField;

  @FXML
  private TableColumn<V_A, String> namaVAColumn;

  @FXML
  private TextField namaVATextField;

  @FXML
  private TextField nipPegawaiTextField;

  @FXML
  private TableColumn<V_A, String> nipPegawaiColumn;

  @FXML
  private TableColumn<V_A, LocalDate> tanggalVAColumn;

  @FXML
  private DatePicker tanggalVADatePicker;

  @FXML
  private TableView<V_A> vaTableView;

  @FXML
  private TableColumn<V_A, String> idColumn;

  private V_ARepo v_aRepo;

  @Override
  public void initialize(URL location, ResourceBundle resources) {
    Preferences prefs = Preferences.userNodeForPackage(LoginController.class);
    nipPegawaiTextField.setText(prefs.get("nip", null));
    v_aRepo = new V_ARepo();
    initTable();
    tableItemClickListener();
  }

  @FXML
  void cancel(ActionEvent event) {
    cancelBtn(event, "dashboardadmin.fxml");
  }

  @FXML
  void cetak(ActionEvent event) {
    /*ReportUtil reportUtil = new ReportUtil();
    String file = getClass().getClassLoader().getResource("report/pegawai_report.jrxml").getFile();
    reportUtil.printReport(file);*/
    System.out.println("Maaf, sedang dalam tahap pengerjaan");
  }

  @FXML
  void edit(ActionEvent event) {
    clearFormField();
    initTable();
  }

  @FXML
  void hapus(ActionEvent event) {
    clearFormField();
    initTable();
  }

  @FXML
  void reset(ActionEvent event) {
    clearFormField();
  }

  @FXML
  void simpan(ActionEvent event) {
    v_aRepo.create(getEntityByForm());
    clearFormField();
    initTable();
  }

  @FXML
  void browseFile(ActionEvent event) {
    FileChooser fc = new FileChooser();
    fc.setTitle("Pilih berkas PDF");
    fc.getExtensionFilters().add(new FileChooser.ExtensionFilter("PDF files (*.pdf)", "*.pdf"));
    try {
      File file = fc.showOpenDialog(new Stage());
      fileVATextField.setText(file.getCanonicalPath());
    } catch (Exception ex) {}
  }

  protected void cancelBtn(ActionEvent evt, String fxml) {
    Node node = (Node) evt.getSource();
    Stage stage = (Stage) node.getScene().getWindow();
    stage.hide();

    AnchorPane root = null;
    try {
      root = (AnchorPane) FXMLLoader.load(getClass().getClassLoader().getResource(fxml));
    } catch (Exception ex) {
      ex.printStackTrace();
    }
    Scene scene = new Scene(root);
    stage.setScene(scene);
    stage.show();
  }

  protected void initTable(List<V_A>... p) {
    try {
      List<V_A> v_as = v_aRepo.read();
      ObservableList<V_A> v_aList = FXCollections.observableArrayList(v_as);
      vaTableView.setItems(v_aList);
      idColumn.setCellValueFactory(new PropertyValueFactory<V_A, String>("ID"));
      tanggalVAColumn.setCellValueFactory(new PropertyValueFactory<V_A, LocalDate>("tanggal"));
      nipPegawaiColumn.setCellValueFactory(new PropertyValueFactory<V_A, String>("NIP"));
      namaVAColumn.setCellValueFactory(new PropertyValueFactory<V_A, String>("namaV_A"));
      domainVAColumn.setCellValueFactory(new PropertyValueFactory<V_A, String>("domain"));
      fileVAColumn.setCellValueFactory(new PropertyValueFactory<V_A, String>("fileDir"));
    } catch(Exception ex) {
      ex.printStackTrace();
    }
  }

  protected void tableItemClickListener() {
    vaTableView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
      V_A v_a = newValue;
      if (v_a == null) v_a = oldValue;
      nipPegawaiTextField.setText(v_a.getNIP());
      tanggalVADatePicker.setValue(v_a.getTanggal());
      namaVATextField.setText(v_a.getNamaV_A());
      domainVATextField.setText(v_a.getDomain());
      fileVATextField.setText(v_a.getFileDir());
    });
  }

  protected void clearFormField() {
    vaTableView.getSelectionModel().clearSelection();
    nipPegawaiTextField.setText("");
    tanggalVADatePicker.setValue(null);
    namaVATextField.setText("");
    domainVATextField.setText("");
    fileVATextField.setText("");
  }

  protected V_A getEntityByForm() {
    LocalDate tanggal = tanggalVADatePicker.getValue();
    String NIP = nipPegawaiTextField.getText();
    String namaV_A = namaVATextField.getText();
    String domain = domainVATextField.getText();
    String fileDir = fileVATextField.getText();
    return new V_A(tanggal, NIP, namaV_A, domain, fileDir);
  }

}
